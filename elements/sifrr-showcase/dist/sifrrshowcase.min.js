/*! SifrrShowcase v0.0.4 - sifrr project | MIT licensed | https://github.com/sifrr/sifrr-elements */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("@sifrr/dom"),require("@sifrr/storage")):"function"==typeof define&&define.amd?define(["@sifrr/dom","@sifrr/storage"],e):(t=t||self).SifrrShowcase=e(t.Sifrr.Dom,t.Sifrr.Storage)}(this,function(t,e){"use strict";function s(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}t=t&&t.hasOwnProperty("default")?t.default:t,e=e&&e.hasOwnProperty("default")?e.default:e;var a="*{box-sizing:border-box}h1,h3,label,li,p,span{font-family:Roboto,Ariel}.container{width:100%;height:100%;display:flex;flex-wrap:nowrap;background-color:#3a3f5a}#sidemenu{width:15%}#sidemenu,#sidemenu>*{height:100%}sifrr-single-showcase{width:85%;height:100%;display:block}#sidebar{width:30%;height:100%}#sidebar>*{height:33.33%}#main{width:70%;height:100%}.flex-column{height:100%;display:flex;flex-wrap:nowrap;flex-direction:column}.box{width:100%;overflow:scroll;border:1px solid #5f616d}#element{padding:20px;height:70%}\n\n${this.state.style}#code{height:30%}#code sifrr-code-editor{height:calc(100% - 48px)!important}h1,h3{color:#ccc;text-align:center}label,li{color:#8f9cb3;font-size:16px;line-height:24px;padding:4px}#error,#status{color:red}sifrr-code-editor{height:calc(100% - 24px)}ul{padding:8px;margin:0}.showcase,.variant{list-style-type:none}.showcase span,.variant span{color:red;float:right}#loader,#saver{color:green;padding:4px;margin:0}.button,button{position:relative;display:inline-block;background:#ccc;border:1px solid grey;color:#3a3f5a;font-size:14px;padding:4px}.button input,button input{position:absolute;width:100%;height:100%;top:0;left:0;opacity:0}";"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;var i;(function(e,s){e.exports=function(t){function e(){const t=(s=['\n<style media="screen">\n  ','\n</style>\n<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/styles/${this.theme}.min.css">\n<pre class=\'hljs\'>\n  <code id="highlight" data-sifrr-html="true">\n    ${this.htmlValue}\n  </code>\n</pre>\n<textarea class=\'hljs\' _input="${this.input}" _scroll="console.log(this)"></textarea>'],(a=['\n<style media="screen">\n  ','\n</style>\n<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/styles/\\${this.theme}.min.css">\n<pre class=\'hljs\'>\n  <code id="highlight" data-sifrr-html="true">\n    \\${this.htmlValue}\n  </code>\n</pre>\n<textarea class=\'hljs\' _input="\\${this.input}" _scroll="console.log(this)"></textarea>'])||(a=s.slice(0)),Object.freeze(Object.defineProperties(s,{raw:{value:Object.freeze(a)}})));var s,a;return e=function(){return t},t}const s=(t=t&&t.hasOwnProperty("default")?t.default:t).template(e(),":host {\n  display: block;\n  position: relative; }\n\n* {\n  box-sizing: border-box; }\n\n.hljs {\n  width: 100%;\n  height: 100%;\n  font-family: Consolas,Liberation Mono,Courier,monospace;\n  font-size: 14px;\n  line-height: 18px;\n  padding: 8px;\n  margin: 0;\n  position: absolute;\n  white-space: pre-wrap;\n  top: 0;\n  left: 0; }\n\ntextarea {\n  z-index: 2;\n  resize: none;\n  border: none; }\n\ntextarea.loaded {\n  background: transparent !important;\n  text-shadow: 0px 0px 0px rgba(0, 0, 0, 0);\n  text-fill-color: transparent;\n  -webkit-text-fill-color: transparent; }\n\npre {\n  z-index: 1; }\n");class a extends t.Element{static get template(){return s}static observedAttrs(){return["value","theme"]}onAttributeChange(){this.update()}onConnect(){fetch("https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/highlight.min.js").then(t=>t.text()).then(t=>new Function(t)()).then(()=>this.hljsLoaded());const t=this.$("textarea");t.addEventListener("keydown",e=>{let s=e.keyCode||e.which;if(this.$("#highlight").style.height=this.$("textarea").height,9==s){e.preventDefault();const s=t.selectionStart,a=t.selectionEnd,i="  ",n=2;t.value=t.value.substring(0,s)+i+t.value.substring(a),t.selectionStart=t.selectionEnd=s+n}}),t.onscroll=(()=>{this.$("pre.hljs").scrollTop=t.scrollTop})}input(){t.Event.trigger(this,"input"),this.update()}hljsLoaded(){this.$("textarea").classList.add("loaded"),this.update()}get htmlValue(){return window.hljs?window.hljs.highlight(this.lang,this.value).value:this.value.replace(/</g,"&lt;")}get theme(){return this.getAttribute("theme")||"atom-one-dark"}set theme(t){this.setAttribute("theme",t),this.update()}get value(){return this.$("textarea").value}set value(t){this.$("textarea").value=t,this.update()}get lang(){return this.getAttribute("lang")||"html"}}return t.register(a),a}(t)})(i={exports:{}},i.exports);function n(){const t=s(['<style media="screen">\n  ',"\n</style>\n",""]);return n=function(){return t},t}const r=t.template(n(),a,'<div class="container"> <div class="flex-column" id="sidebar"> <div class="box"> <h3>Variants</h3> <input id="variantName" type="text" name="variantName" value="${this.state.variantName}" data-sifrr-bind="variantName"> <button type="button" name="createVariant" _click="${this.createNewVariant}">Create new variant</button> <style media="screen"> #variant${this.state.variantId} {\n          background: #5f616d;\n        } </style> <div id="showcases"> <ul data-sifrr-repeat="${this.state.variants}"> <li class="variant" data-variant-id="${this.state.variantId}" id="variant${this.state.variantId}">${this.state.variantName}<span>X</span></li> </ul> </div> </div> <div class="box"> <label for="style">Element CSS Styles</label> <sifrr-code-editor lang="css" data-sifrr-bind="style" value="${this.state.style}"></sifrr-code-editor> </div> <div class="box"> <label for="elState">Element State Function</label> <sifrr-code-editor id="elState" lang="js" data-sifrr-bind="elState" value="${this.state.elState}"></sifrr-code-editor> </div> </div> <div class="flex-column" id="main"> <div class="box" id="element" data-sifrr-html="true"> ${this.state.code} </div> <div class="box" id="code"> <label for="elementName">Element Name</label> <input type="text" name="elementName" placeholder="Enter element name here..." _input="${this.updateHtml}" value="${this.state.element}"> <label for="customUrl">Custom Url</label> <input type="text" name="customUrl" placeholder="Enter element url here..." value="${this.state.elementUrl}" data-sifrr-bind="elementUrl"> <label for="elementName">Is JS File</label> <select id="isjs" name="isjs" value="${this.state.isjs}" data-sifrr-bind="isjs"> <option value="true">true</option> <option value="false">false</option> </select> <span id="error"></span> <br> <label for="htmlcode">HTML Code</label> <sifrr-code-editor lang="html" data-sifrr-bind="code" value="${this.state.code}"></sifrr-code-editor> </div> </div> </div>');t.Event.add("click");class l extends t.Element{static get template(){return r}static observedAttrs(){return["url"]}onConnect(){this.switchVariant(),Sifrr.Dom.Event.addListener("click",".variant",(t,e)=>{e.matches(".variant")&&this.switchVariant(e.dataset.variantId),e.matches(".variant span")&&this.deleteVariant(e.parentNode.dataset.variantId)})}beforeUpdate(){this.saveVariant()}onUpdate(){let e;this._element===this.state.element&&this._js===this.state.isjs&&this._url===this.state.elementUrl||(t.load(this.state.element,{js:"true"==this.state.isjs,url:this.state.elementUrl?this.state.elementUrl:void 0}).then(()=>this.$("#error").innerText="").catch(t=>this.$("#error").innerText=t.message),this._js=this.state.isjs,this._element=this.state.element,this._url=this.state.elementUrl);try{e=new Function(this.$("#elState").value).call(this.element())}catch(t){}e&&this.element()&&this.element().isSifrr&&this.element().state!==e&&(this.element().state=e)}onAttributeChange(t,e,s){"url"===t&&(this.url=s)}createNewVariant(){const t=Math.max(...this.state.variants.map(t=>t.variantId),0)+1;this.state.variants.push(Object.assign({},{variantId:t,variantName:this.state.variantName,style:this.state.style,code:this.state.code,elState:this.state.elState})),this.switchVariant(t)}deleteVariant(t){this.state.variants.forEach((e,s)=>{e.variantId==t&&(this.state.variants.splice(s,1),this.state.variantId==t?this.switchVariant((this.state.variants[s]||{}).variantId):this.update())})}saveVariant(){const t=this.state.variantId;this.state.variants.forEach(e=>{e.variantId==t&&Object.assign(e,{variantName:this.state.variantName,style:this.state.style,code:this.state.code,elState:this.state.elState})})}switchVariant(t){Object.assign(this.state,this.variant(t)),this.update()}updateHtml(t,e){const s="<".concat(e.value,"></").concat(e.value,">");this.state={code:s,element:e.value}}element(){return this.$("#element").firstElementChild}variant(t){return this.state.variants.filter(e=>e.variantId==t)[0]||this.state.variants[this.state.variants.length-1]}}function o(){const t=s(['<style media="screen">\n  ','\n</style>\n<div class="container">\n  <div class="flex-column" id="sidemenu">\n    <div class="box">\n      <h1>Sifrr Showcase</h1>\n      <p id="loader"></p>\n      <input id="url" type="text" placeholder="Enter url here..." name="url" />\n      <button type="button" name="loadUrl" _click=${this.loadUrl}>Load from url</button>\n      <p id="status"></p>\n      <span class="button">\n        Upload File\n        <input type="file" name="file" accept="application/json" _input="${this.loadFile}" />\n      </span>\n      <button type="button" name="saveFile" _click="${this.saveFile}">Save to File</button>\n      <h3>Showcases</h3>\n      <input id="showcaseName" type="text" name="showcase" _input=${this.changeName}>\n      <button type="button" name="createVariant" _click="${this.createShowcase}">Create new showcase</button>\n      <style>\n        .current {\n          background: #5f616d;\n        }\n      </style>\n      <div id="showcases" data-sifrr-repeat="${this.state.showcases}">\n        <li class="showcase" data-showcase-id="${this.state.key}" draggable="true">${this.state.name}<span>X</span></li>\n      </div>\n    </div>\n  </div>\n  <sifrr-single-showcase _update=${this.saveShowcase}></sifrr-single-showcase>\n</div>'],['<style media="screen">\n  ','\n</style>\n<div class="container">\n  <div class="flex-column" id="sidemenu">\n    <div class="box">\n      <h1>Sifrr Showcase</h1>\n      <p id="loader"></p>\n      <input id="url" type="text" placeholder="Enter url here..." name="url" />\n      <button type="button" name="loadUrl" _click=\\${this.loadUrl}>Load from url</button>\n      <p id="status"></p>\n      <span class="button">\n        Upload File\n        <input type="file" name="file" accept="application/json" _input="\\${this.loadFile}" />\n      </span>\n      <button type="button" name="saveFile" _click="\\${this.saveFile}">Save to File</button>\n      <h3>Showcases</h3>\n      <input id="showcaseName" type="text" name="showcase" _input=\\${this.changeName}>\n      <button type="button" name="createVariant" _click="\\${this.createShowcase}">Create new showcase</button>\n      <style>\n        .current {\n          background: #5f616d;\n        }\n      </style>\n      <div id="showcases" data-sifrr-repeat="\\${this.state.showcases}">\n        <li class="showcase" data-showcase-id="\\${this.state.key}" draggable="true">\\${this.state.name}<span>X</span></li>\n      </div>\n    </div>\n  </div>\n  <sifrr-single-showcase _update=\\${this.saveShowcase}></sifrr-single-showcase>\n</div>']);return o=function(){return t},t}l.defaultState={id:1,name:"Placeholder Element",element:"sifrr-placeholder",elementUrl:"",isjs:!0,variantName:"",variants:[{variantId:1,variantName:"variant",style:"#element > * {\n  display: block;\n  background-color: white;\n  margin: auto;\n}",code:"<sifrr-placeholder>\n</sifrr-placeholder>",elState:"return {\n\n}"}]},t.register(l);const h=t.template(o(),a),c=new e({name:"showcases",version:"1.0"});class d extends t.Element{static get template(){return h}static observedAttrs(){return["url"]}onAttributeChange(t,e,s){"url"===t&&(this.url=s)}onConnect(){if(Sifrr.Dom.Event.addListener("click",".showcase",(t,e)=>{e.matches(".showcase")&&this.switchShowcase(this.getChildIndex(e)),e.matches(".showcase span")&&this.deleteShowcase(this.getChildIndex(e))}),this.switchShowcase(0),c.all().then(t=>{this._loaded=!0,Array.isArray(t.showcases)&&(this.state.showcases=t.showcases,this.switchShowcase(t.current))}),window.Sortable){const t=this;new window.Sortable(this.$("#showcases"),{draggable:"li",onEnd:e=>{const s=e.oldIndex,a=e.newIndex,i=t.state.showcases[s];t.state.showcases[s]=t.state.showcases[a],t.state.showcases[a]=i;const n=t.$("#showcases .current");t.switchShowcase(t.getChildIndex(n))}})}}getChildIndex(t){let e=0;for(;null!=(t=t.previousSibling);)e++;return e}deleteShowcase(t){this.state.showcases.splice(t,1),t==this.state.current?this.switchShowcase(this.state.current):this.switchShowcase(this.state.current-1)}createShowcase(){const t=this.state.showcases.push({name:this.$("#showcaseName").value,variants:[]});this.switchShowcase(t-1)}switchShowcase(t){this.$("#showcases").children[this.state.current].classList.remove("current"),this.state.showcases[t]||(t=this.state.showcases.length-1),this.state={current:t},this.el.state=this.state.showcases[t],this.$("#showcases").children[t].id="showcase"+t,this.$("#showcases").children[t].classList.add("current")}saveShowcase(){delete this.el.state.name,this.state.showcases[this.state.current]=Object.assign(this.state.showcases[this.state.current]||{},this.el.state),this._loaded&&(this.$("#status").textContent="saving locally!",this._timeout&&clearTimeout(this._timeout),this._timeout=setTimeout(()=>{c.set({showcases:this.state.showcases,current:this.state.current}).then(()=>{this.$("#status").textContent="saved locally!"})},500))}changeName(){this.state.showcases[this.state.current].name=this.$("#showcaseName").value,this.update()}get el(){return this.$("sifrr-single-showcase")}set url(t){this._url=t,this.getAttribute("url")!==t&&this.setAttribute("url",t),this.$("#url").value!==t&&(this.$("#url").value=t),this.loadUrl()}get url(){return this._url}loadUrl(){this._url=this.$("#url").value,window.fetch(this._url).then(t=>t.json()).then(t=>{this.state=t,this.$("#status").textContent="loaded from url!"}).catch(t=>{this.$("#status").textContent=t.message})}saveFile(){const t=new Blob([JSON.stringify(this.state,null,2)],{type:"application/json"}),e=document.createElement("a");e.href=URL.createObjectURL(t),e.download="showcases",e.click()}loadFile(t,e){const s=e.files[0],a=new FileReader;a.onload=(()=>{const t=JSON.parse(a.result);this.state=t,this.$("#status").textContent="loaded from file!"}),a.readAsText(s)}}return d.defaultState={current:0,showcases:[{name:"new"}]},t.register(d),d});
/*! (c) @aadityataparia */
