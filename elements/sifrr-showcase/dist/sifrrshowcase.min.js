/*! SifrrShowcase v0.0.5 - sifrr project | MIT licensed | https://github.com/sifrr/sifrr-elements */
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("@sifrr/dom"),require("@sifrr/storage")):"function"==typeof define&&define.amd?define(["@sifrr/dom","@sifrr/storage"],e):(t=t||self).SifrrShowcase=e(t.Sifrr.Dom,t.Sifrr.Storage)}(this,function(t,e){"use strict";function s(t,e){return e||(e=t.slice(0)),Object.freeze(Object.defineProperties(t,{raw:{value:Object.freeze(e)}}))}t=t&&t.hasOwnProperty("default")?t.default:t,e=e&&e.hasOwnProperty("default")?e.default:e;var a="*{box-sizing:border-box}.font{font-family:Roboto,Ariel}.container{width:100%;height:100%;display:flex;flex-wrap:nowrap;background-color:#3a3f5a}#sidemenu{width:15%;height:100%}#sidemenu>*{height:100%}sifrr-single-showcase{width:85%;height:100%;display:block}#sidebar{width:30%;height:100%}#sidebar>*{height:33.33%}#main{width:70%;height:100%}.current{background:#5f616d}.flex-column{height:100%;display:flex;flex-wrap:nowrap;flex-direction:column}.box{width:100%;overflow:scroll;border:1px solid #5f616d}#element{padding:20px;height:70%}#code{height:30%}#code sifrr-code-editor{height:calc(100% - 48px)!important}.head{color:#ccc;text-align:center}.small{color:#8f9cb3;font-size:16px;line-height:24px;padding:4px}#error,#status{color:red}sifrr-code-editor{height:calc(100% - 24px)}ul{padding:8px;margin:0}#variants{height:calc(100% - 86px);overflow-y:scroll}.showcase,.variant{list-style-type:none;border-bottom:1px solid #5f616d}.showcase span,.variant span{color:red;float:right;margin-right:10px}#loader,#saver{color:green;padding:4px;margin:0}.button,button{position:relative;display:inline-block;background:#ccc;border:1px solid grey;color:#3a3f5a;font-size:14px;padding:4px}.button input,button input{position:absolute;width:100%;height:100%;top:0;left:0;opacity:0}";function i(){const t=s(['\n<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@','/lib/codemirror.css">\n<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@','/theme/${this.getTheme()}.css">\n<style media="screen">\n  ',"\n</style>\n<textarea></textarea>"],['\n<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@','/lib/codemirror.css">\n<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/codemirror@','/theme/\\${this.getTheme()}.css">\n<style media="screen">\n  ',"\n</style>\n<textarea></textarea>"]);return i=function(){return t},t}const n="5.48.0",r=t.template(i(),n,n,":host{display:block;position:relative}*{box-sizing:border-box}textarea{resize:none;border:none}.CodeMirror,textarea{height:100%;width:100%}");function l(){const t=s(['<style media="screen">\n  ',"\n</style>\n<style>\n${this.state.style}\n</style>\n",""],['<style media="screen">\n  ',"\n</style>\n<style>\n\\${this.state.style}\n</style>\n",""]);return l=function(){return t},t}t.register(class extends t.Element{static get template(){return r}static observedAttrs(){return["value","theme","lang"]}static syncedAttrs(){return["theme"]}static cm(){return this._cm=this._cm||t.Loader.executeJS("https://cdn.jsdelivr.net/npm/codemirror@".concat(n,"/lib/codemirror.js")),this._cm}onAttributeChange(t,e,s){this._cmLoaded&&("theme"===t&&this.cm.setOption("theme",s),"lang"===t&&this.cm.setOption("mode",this.getTheme()))}onConnect(){this.constructor.cm().then(()=>this.cmLoaded())}input(){t.Event.trigger(this,"input"),this.update()}cmLoaded(){t.Loader.executeJS("https://cdn.jsdelivr.net/npm/codemirror@".concat(n,"/mode/").concat(this.lang,"/").concat(this.lang,".js")).then(()=>{this.cm=window.CodeMirror.fromTextArea(this.$("textarea"),{value:this.$("textarea").value,mode:this.lang,htmlMode:!0,theme:this.getTheme(),indentUnit:2,tabSize:2,lineNumbers:!0}),this.cm.on("change",this.input.bind(this)),this._cmLoaded=!0})}getTheme(){return this.theme?this.theme.split(" ")[0]:"dracula"}get value(){return this._cmLoaded?this.cm.getValue():this.$("textarea").value}set value(t){if(t!==this.value)return this._cmLoaded?this.cm.setValue(t):void(this.$("textarea").value=t)}get lang(){const t=this.getAttribute("lang");return t&&"html"!==t?t:"xml"}});const o=t.template(l(),a,'<div class="container"> <div class="flex-column" id="sidebar"> <div class="box"> <h3 class="font head">Variants</h3> <input id="variantName" type="text" name="variantName" value="${this.state.variantName}" data-sifrr-bind="variantName"> <button class="font" type="button" name="createVariant" _click="${this.createNewVariant}">Create new variant</button> <style media="screen"> #variant${this.state.variantId} {\n          background: #5f616d;\n        } </style> <div id="variants"> <div data-sifrr-repeat="${this.state.variants}"> <li class="font variant small" data-variant-id="${this.state.variantId}" id="variant${this.state.variantId}">${this.state.variantName}<span>X</span></li> </div> </div> </div> <div class="box"> <label class="font small" for="style">Element CSS Styles</label> <sifrr-code-editor lang="css" data-sifrr-bind="style" value="${this.state.style}"></sifrr-code-editor> </div> <div class="box"> <label class="font small" for="elState">Element State Function</label> <sifrr-code-editor id="elState" lang="javascript" data-sifrr-bind="elState" value="${this.state.elState}"></sifrr-code-editor> </div> </div> <div class="flex-column" id="main"> <div class="box" id="element" data-sifrr-html="true"> ${this.state.code} </div> <div class="box" id="code"> <label class="font small" for="elementName">Element Name</label> <input type="text" name="elementName" placeholder="Enter element name here..." _input="${this.updateHtml}" value="${this.state.element}"> <label class="font small" for="customUrl">Custom Url</label> <input type="text" name="customUrl" placeholder="Enter element url here..." value="${this.state.elementUrl}" data-sifrr-bind="elementUrl"> <label class="font small" for="elementName">Is JS File</label> <select id="isjs" name="isjs" value="${this.state.isjs}" data-sifrr-bind="isjs"> <option value="true">true</option> <option value="false">false</option> </select> <span class="font" id="error"></span> <br> <label class="font small" for="htmlcode">HTML Code</label> <sifrr-code-editor data-sifrr-bind="code" value="${this.state.code}"></sifrr-code-editor> </div> </div> </div>');t.Event.add("click");class h extends t.Element{static get template(){return o}static observedAttrs(){return["url"]}onConnect(){this.switchVariant(),t.Event.addListener("click",".variant",(t,e)=>{e.matches(".variant")&&this.switchVariant(e.dataset.variantId),e.matches(".variant span")&&this.deleteVariant(e.parentNode.dataset.variantId)})}beforeUpdate(){this.saveVariant(),this.state.elemnt&&(this._element===this.state.element&&this._js===this.state.isjs&&this._url===this.state.elementUrl||(t.load(this.state.element,{js:"true"==this.state.isjs,url:this.state.elementUrl?this.state.elementUrl:void 0}).then(()=>this.$("#error").innerText="").catch(t=>this.$("#error").innerText=t.message),this._js=this.state.isjs,this._element=this.state.element,this._url=this.state.elementUrl))}onUpdate(){this._stateFxnTimeout&&clearTimeout(this._stateFxnTimeout),this._stateFxnTimeout=setTimeout(this.runStateFunction.bind(this),500)}runStateFunction(){let t;try{t=new Function(this.$("#elState").value).call(this.element())}catch(t){window.console.warn(t)}t&&this.element()&&this.element().isSifrr&&this.element().state!==t&&(this.element().state=t)}onAttributeChange(t,e,s){"url"===t&&(this.url=s)}createNewVariant(){const t=Math.max(...this.state.variants.map(t=>t.variantId),0)+1,e=this.state.variants.findIndex(t=>t.variantId==this.state.variantId)+1||1;this.state.variants.splice(e,0,Object.assign({},{variantId:t,variantName:this.state.variantName,style:this.state.style||"",code:this.state.code||"",elState:this.state.elState||""})),this.switchVariant(t)}deleteVariant(t){this.state.variants.forEach((e,s)=>{e.variantId==t&&(this.state.variants.splice(s,1),this.state.variantId==t?this.switchVariant((this.state.variants[s]||{}).variantId):this.update())})}saveVariant(){this.state.variants||(this.state.variants=[]);const t=this.state.variantId;this.state.variants.forEach(e=>{e.variantId==t&&Object.assign(e,{variantName:this.state.variantName,style:this.state.style,code:this.state.code,elState:this.state.elState})})}switchVariant(t){this.$("#element").textContent="",Object.assign(this.state,this.variant(t)),this.update()}updateHtml(t,e){const s="<".concat(e.value,"></").concat(e.value,">");this.state={code:s,element:e.value}}element(){return this.$("#element").firstElementChild}variant(t){return this.state.variants.find(e=>e.variantId==t)||this.state.variants[this.state.variants.length-1]}}function c(){const t=s(['<style media="screen">\n  ','\n</style>\n<div class="container">\n  <div class="flex-column" id="sidemenu">\n    <div class="box">\n      <h1 class="font head">Sifrr Showcase</h1>\n      <p class="font" id="loader"></p>\n      <input id="url" type="text" placeholder="Enter url here..." name="url" />\n      <button type="button" name="loadUrl" _click=${this.loadUrl}>Load from url</button>\n      <p class="font" id="status"></p>\n      <span class="button font">\n        Upload File\n        <input type="file" name="file" accept="application/json" _input="${this.loadFile}" />\n      </span>\n      <button class="font" type="button" name="saveFile" _click="${this.saveFile}">Save to File</button>\n      <h3 class="font head">Showcases</h3>\n      <input id="showcaseName" type="text" name="showcase" _input=${this.changeName} value=${this.state.showcases[this.state.current].name}>\n      <button class="font" type="button" name="createVariant" _click="${this.createShowcase}">Create new showcase</button>\n      <div id="showcases" data-sifrr-repeat="${this.state.showcases}">\n        <li class="font showcase small ${(this.root && this.state.name === this.root.state.currentSC.name) ? \'current\' : \'\'}" data-showcase-id="${this.state.key}" draggable="true">${this.state.name}<span>X</span></li>\n      </div>\n    </div>\n  </div>\n  <sifrr-single-showcase _update=${this.saveShowcase} _state=${this.state.currentSC} data-sifrr-bind="currentSC"></sifrr-single-showcase>\n</div>'],['<style media="screen">\n  ','\n</style>\n<div class="container">\n  <div class="flex-column" id="sidemenu">\n    <div class="box">\n      <h1 class="font head">Sifrr Showcase</h1>\n      <p class="font" id="loader"></p>\n      <input id="url" type="text" placeholder="Enter url here..." name="url" />\n      <button type="button" name="loadUrl" _click=\\${this.loadUrl}>Load from url</button>\n      <p class="font" id="status"></p>\n      <span class="button font">\n        Upload File\n        <input type="file" name="file" accept="application/json" _input="\\${this.loadFile}" />\n      </span>\n      <button class="font" type="button" name="saveFile" _click="\\${this.saveFile}">Save to File</button>\n      <h3 class="font head">Showcases</h3>\n      <input id="showcaseName" type="text" name="showcase" _input=\\${this.changeName} value=\\${this.state.showcases[this.state.current].name}>\n      <button class="font" type="button" name="createVariant" _click="\\${this.createShowcase}">Create new showcase</button>\n      <div id="showcases" data-sifrr-repeat="\\${this.state.showcases}">\n        <li class="font showcase small \\${(this.root && this.state.name === this.root.state.currentSC.name) ? \'current\' : \'\'}" data-showcase-id="\\${this.state.key}" draggable="true">\\${this.state.name}<span>X</span></li>\n      </div>\n    </div>\n  </div>\n  <sifrr-single-showcase _update=\\${this.saveShowcase} _state=\\${this.state.currentSC} data-sifrr-bind="currentSC"></sifrr-single-showcase>\n</div>']);return c=function(){return t},t}h.defaultState={id:1,name:"Placeholder Element",element:"sifrr-placeholder",elementUrl:"",isjs:!0,variantName:"",variants:[{variantId:1,variantName:"variant",style:"#element > * {\n  display: block;\n  background-color: white;\n  margin: auto;\n}",code:"<sifrr-placeholder>\n</sifrr-placeholder>",elState:"return {\n\n}"}]},t.register(h);const d=t.template(c(),a),u=new e({name:"showcases",version:"1.0"});class m extends t.Element{static get template(){return d}static observedAttrs(){return["url"]}onAttributeChange(t,e,s){"url"===t&&(this.url=s)}onConnect(){if(t.Event.addListener("click",".showcase",(t,e)=>{e.matches(".showcase")&&this.switchShowcase(this.getChildIndex(e)),e.matches(".showcase span")&&this.deleteShowcase(this.getChildIndex(e.parentNode))}),this.loadUrl(),this.switchShowcase(0),window.Sortable){const t=this;new window.Sortable(this.$("#showcases"),{draggable:"li",onEnd:e=>{const s=e.oldIndex,a=e.newIndex,i=t.state.showcases[s];t.state.showcases[s]=t.state.showcases[a],t.state.showcases[a]=i;const n=t.$("#showcases .current");t.switchShowcase(t.getChildIndex(n))}})}}getChildIndex(t){let e=0;for(;null!=(t=t.previousElementSibling);)e++;return e}deleteShowcase(t){this.state.showcases.splice(t,1),t==this.state.current?this.switchShowcase(this.state.current):this.switchShowcase(this.state.current-1)}createShowcase(){this.state.showcases.splice(this.state.current+1,0,{name:this.$("#showcaseName").value,variants:[],element:this.$("#showcaseName").value}),this.switchShowcase(this.state.current+1)}switchShowcase(t){this.current=t,this.$("#showcases").children[this.state.current].classList.remove("current"),this.state.showcases[t]||(t=this.state.showcases.length-1),this.state={current:t,currentSC:this.state.showcases[t]},this.$("#showcases").children[t].classList.add("current")}onStateChange(){this.state.current!==this.current&&this.switchShowcase(this.state.current)}saveShowcase(){this.state.showcases[this.state.current]=Object.assign(this.state.showcases[this.state.current],this.state.currentSC),this._loaded&&(this.$("#status").textContent="saving locally!",this._timeout&&clearTimeout(this._timeout),this._timeout=setTimeout(()=>{this._timeout=null,u.set({showcases:this.state.showcases,current:this.state.current}).then(()=>{this.$("#status").textContent="saved locally!"})},500))}changeName(){this.state.showcases[this.state.current].name=this.$("#showcaseName").value,this.update()}get el(){return this.$("sifrr-single-showcase")}set url(t){this._url=t,this.getAttribute("url")!==t&&this.setAttribute("url",t),this.$("#url").value!==t&&(this.$("#url").value=t),this.loadUrl()}get url(){return this._url}loadUrl(){this._url=this.$("#url").value,window.fetch(this._url).then(t=>t.json()).then(t=>{this.state.showcases=t.showcases,this.switchShowcase(t.current),this.$("#status").textContent="loaded from url!"}).catch(t=>{this.$("#status").textContent=t.message,u.all().then(t=>{this.$("#status").textContent="failed to load from url, loaded from storage!",this._loaded=!0,Array.isArray(t.showcases)&&(this.state.showcases=t.showcases,this.switchShowcase(t.current))})})}saveFile(){const t=new Blob([JSON.stringify(this.state,null,2)],{type:"application/json"}),e=document.createElement("a");e.href=URL.createObjectURL(t),e.download="showcases",e.click()}loadFile(t,e){const s=e.files[0],a=new FileReader;a.onload=()=>{const t=JSON.parse(a.result);this.state=t,this.switchShowcase(t.current),this.$("#status").textContent="loaded from file!"},a.readAsText(s)}}return m.defaultState={current:0,showcases:[{name:"new"}]},t.register(m),m});
/*! (c) @aadityataparia */
